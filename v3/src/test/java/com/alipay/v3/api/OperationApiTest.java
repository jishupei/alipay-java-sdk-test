/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.api;

import com.alipay.v3.ApiException;
import com.alipay.v3.ApiClient;
import com.alipay.v3.util.model.AlipayConfig;
import com.alipay.v3.Configuration;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockCloselyrzoneQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockCloselyrzoneQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockEncrydataQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockEncrydataQueryModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockEncrydataQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockGzoneQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockGzoneQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockOpenidtestingQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockOpenidtestingQueryModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockOpenidtestingQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockRzoneQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockRzoneQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockRzonegroovyQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockRzonegroovyQueryModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockRzonegroovyQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTestcertificateQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTestcertificateQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTesterrorcodeQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTesterrorcodeQueryResponseModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTestpathkeyQueryDefaultResponse;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTestpathkeyQueryModel;
import com.alipay.v3.model.AlipayOpenOperationOpenbizmockTestpathkeyQueryResponseModel;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OperationApi
 */
@Disabled
public class OperationApiTest {

    private final OperationApi api = new OperationApi();

    @BeforeEach
    public void setUp() throws ApiException {
        ApiClient defaultClient = Configuration.getDefaultApiClient();
        //初始化alipay参数（全局设置一次）
        AlipayConfig config = new AlipayConfig();
        config.setAppId("2021003126677278");
        config.setPrivateKey("MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCvPSL+jltaVtR0e9nm4c3YKs9r+26HbX6Q5ZL9rKMFPP5lLspWxs2wgLS/PuqqwSr96n5DDLvqTqwQGQCP8XGBexKacmpzozENKjYexsViNeGcZicO2+VeJlXembIk+aQ0pnpIj9RA8Yopj+V54rsA7ZoVU3o8/gizsyhyb8PbBkGbFr4h/PkeONOD6F9Q1Zkti9m3V1mp6vKwGmktciVD0vOD4kB3uF7aNw+6AmdnFa/z9K+5b5UoBRjqKdBP8DWUymqnFdn/zzsJPk/mi/XDUfmt5CBh+oMC9clos25b+OTNjKVif2twks+S8VipOc/FN/ZJfZZ7lfizO1oAh823AgMBAAECggEABavb2xMuX7EZtR9hAPjj2ZAhIGSFwjpH81aKuE0DBaNgtFOcVsyeUY0IzHuzyozv4EHbjj32QvIC3Y6BlycAPmmGQ5taWJ26c6ufDsXuE2yc/ZvMvc1eEfr5onek7U9rAg01Pe3xt5xZlVjD23r8BF6sMu59sUWjcHVm5LU7SHZQqXcFg/hQk6BJHM6cKjP+IZJQXwwuMj1B9+P0dRShpMQvQeG/VNz3ZTwsx83YRhHWiSgzsExAsEknFqxFmzhLR4YyPhF7KL5TbHFqIPWPXdlPIclY4DJU/ujsH9PutgzVMlBFRSU+J74h4cnfsSNtBuRwggu+cOmnYgaes9toKQKBgQDVeRGPY7JPCs5cd+aU38tUrvDDT6UHfXjWTwlYTAPw1WKPSzIiL8q5C3tjcW/XgaGA8P8r7h18bXhvn9L6ypGUQDXF2JVMUcNrgiYEKBNjd9ogDoqUpWAtUAk0Gu2mWEVKpnqRFVP7rwGqiIuiQ/ck2KgfyLC3SbD0qbDGBq0AKwKBgQDSJimD1hbwkgti//iAHUG/icboYCWO1X0RvWjkVrzu3IlAm4nzuL6qP8IRbkaDWqNNq102fMDmF2KdABEJe3wFK12DV2glIORSg0CKOGnOmCaAiTRKfooEcKvDrpC63EnXVCe8BWnNDqh8EsFDnEjNpYkHz1gZK9km1j6SOokWpQKBgQDO49NdAOajLHnrrFjRGERcAmBdKidrJvOh4F/SL3nyQxyOe/ZOo7r5tGMVca9PUddQvEDSNqhlG0OKC3/Sh9inscNryAiKOwQGgdCOXrjLwjCouO8eOVkJEXSaBy8j9JDTVJ2dVupaFraqrEOINA6mq0Pl6f865DSYKo2knnu0mQKBgHItJ8soS4hjYOpl9obs3mcJnVdtvZowJea4iT/eXIJOsge3OimAC5+GSpOb3ZXKbgVqAJf1Cf05YWu5uIf1XnmUiRcuKzhY+ZRXGX6/jcUgZ3LYmN+MhsJI0RndQ2cy/q+OWpROQKCXwTTAH97zD58jvCLRJaVvbGksaAyc3xS9AoGAfP5LTFxwM9tX7axAyMMgZCAq108OF4EiM5JVWutLl223fc1+zSNwzYKcrtNKIQXSgKCT8kL1EThETlPbZHpBEQv4s02nVusxMNO4cAfmwJFwzv2jmfX0YjKYuMHtLekSPUshFPZ/NMrSY41G82Um5DY+phzuh6QR8igaXo3YCE4=");
        config.setAlipayPublicKey("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlr+2Mir816Ye8ybsC8QgIigrG2oqVTwYeCjiJQPGP0x7iRVVwQuuM54rO+OyyfJcvI5UWFtfcpy+si+3JyaInKP69DA0AS4XkVPV/81xcIHMZP/CJAYOtLFLhhyEwp1CMoN45BtJes5lG65UXz/7QzVjcF+6AC+qVKx66HKSsT9b5HyWRxfDkOYixy1gZt39w+sgxaAPVt6pf7UZHX+ENE/gYpTCHHflVPzPfl8TIXTZmEMGqjBLY8GFXVJkvATX3h12VX3AwUlIndY4gJND9l1isFV9BfpmZYyv864z14UH6Kq9u8WVWdF5bsJevo4oU0Q0UB8EmyOdlxBPTDiOzwIDAQAB");
    //        config.setAppCertPath("src/test/resources/fixture/appCertPublicKey_2021003126695331.crt");
    //        config.setAlipayPublicCertPath("src/test/resources/fixture/alipayCertPublicKey_RSA2.crt");
    //        config.setRootCertPath("src/test/resources/fixture/alipayRootCert.crt");
        config.setEncryptKey("wEA0iV4eLSTV+o5/T9RKjg==");

        defaultClient.setAlipayConfig(config);
    }

    /**
     * 测试路由转发closelyrzone
     *
     * 测试路由转发closelyrzone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        
        String a = new String();
        AlipayOpenOperationOpenbizmockCloselyrzoneQueryResponseModel response = api.query(a);
        // TODO: test validations
    }

    /**
     * 测试专用_此接口类型为强制加密接口
     *
     * 测试专用_此接口类型为强制加密接口
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_0Test() throws ApiException {
        
        AlipayOpenOperationOpenbizmockEncrydataQueryModel alipayOpenOperationOpenbizmockEncrydataQueryModel = new AlipayOpenOperationOpenbizmockEncrydataQueryModel();
        AlipayOpenOperationOpenbizmockEncrydataQueryResponseModel response = api.query_0(alipayOpenOperationOpenbizmockEncrydataQueryModel);
        // TODO: test validations
    }

    /**
     * V3网关测试gzone转发
     *
     * V3网关测试gzone转发
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_1Test() throws ApiException {
        
        String a = new String();
        
        String aOpenid = new String();
        AlipayOpenOperationOpenbizmockGzoneQueryResponseModel response = api.query_1(a, aOpenid);
        // TODO: test validations
    }

    /**
     * 网关测试接口openid升级测试
     *
     * openid升级功能测试
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_2Test() throws ApiException {
        
        String userId = new String();
        
        String openId = new String();
        
        String testJson = new String();
        
        AlipayOpenOperationOpenbizmockOpenidtestingQueryModel alipayOpenOperationOpenbizmockOpenidtestingQueryModel = new AlipayOpenOperationOpenbizmockOpenidtestingQueryModel();
        AlipayOpenOperationOpenbizmockOpenidtestingQueryResponseModel response = api.query_2(userId, openId, testJson, alipayOpenOperationOpenbizmockOpenidtestingQueryModel);
        // TODO: test validations
    }

    /**
     * 测试openapi路由
     *
     * 测试openapi路由rzone_uid的规则
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_3Test() throws ApiException {
        
        String uid = new String();
        
        String lalalaOpenid = new String();
        
        String testJson = new String();
        
        String testJsonOpenid = new String();
        
        String hahaha = new String();
        
        String hahahaOpenid = new String();
        AlipayOpenOperationOpenbizmockRzoneQueryResponseModel response = api.query_3(uid, lalalaOpenid, testJson, testJsonOpenid, hahaha, hahahaOpenid);
        // TODO: test validations
    }

    /**
     * 测试路由转发groovy脚本
     *
     * 测试路由转发groovy脚本
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_4Test() throws ApiException {
        
        AlipayOpenOperationOpenbizmockRzonegroovyQueryModel alipayOpenOperationOpenbizmockRzonegroovyQueryModel = new AlipayOpenOperationOpenbizmockRzonegroovyQueryModel();
        AlipayOpenOperationOpenbizmockRzonegroovyQueryResponseModel response = api.query_4(alipayOpenOperationOpenbizmockRzonegroovyQueryModel);
        // TODO: test validations
    }

    /**
     * 测试专用此接口为强制走证书的接口
     *
     * 测试专用此接口为强制走证书的接口
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_5Test() throws ApiException {
        
        String keykey = new String();
        AlipayOpenOperationOpenbizmockTestcertificateQueryResponseModel response = api.query_5(keykey);
        // TODO: test validations
    }

    /**
     * 测试错误码验证接口
     *
     * 测试错误码验证接口
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_6Test() throws ApiException {
        
        String key = new String();
        
        String keykey = new String();
        AlipayOpenOperationOpenbizmockTesterrorcodeQueryResponseModel response = api.query_6(key, keykey);
        // TODO: test validations
    }

    /**
     * 测试网关协议3.0key和path
     *
     * 测试网关协议3.0key和path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void query_7Test() throws ApiException {
        
        String keykey = new String();
        
        String a = new String();
        
        String c = new String();
        
        String b = new String();
        
        AlipayOpenOperationOpenbizmockTestpathkeyQueryModel alipayOpenOperationOpenbizmockTestpathkeyQueryModel = new AlipayOpenOperationOpenbizmockTestpathkeyQueryModel();
        AlipayOpenOperationOpenbizmockTestpathkeyQueryResponseModel response = api.query_7(keykey, a, c, b, alipayOpenOperationOpenbizmockTestpathkeyQueryModel);
        // TODO: test validations
    }

}
