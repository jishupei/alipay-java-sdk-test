/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * UserDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserDetail {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_GMT_SIGN_UP = "gmt_sign_up";
  @SerializedName(SERIALIZED_NAME_GMT_SIGN_UP)
  private String gmtSignUp;

  public static final String SERIALIZED_NAME_IS_MASTER_USER = "is_master_user";
  @SerializedName(SERIALIZED_NAME_IS_MASTER_USER)
  private Boolean isMasterUser;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public UserDetail() { 
  }

  public UserDetail address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * 地址
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "地址")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public UserDetail amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * 数量
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "数量")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public UserDetail gmtSignUp(String gmtSignUp) {
    
    this.gmtSignUp = gmtSignUp;
    return this;
  }

   /**
   * 注册时间
   * @return gmtSignUp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "注册时间")

  public String getGmtSignUp() {
    return gmtSignUp;
  }


  public void setGmtSignUp(String gmtSignUp) {
    this.gmtSignUp = gmtSignUp;
  }


  public UserDetail isMasterUser(Boolean isMasterUser) {
    
    this.isMasterUser = isMasterUser;
    return this;
  }

   /**
   * 大师级用户
   * @return isMasterUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "大师级用户")

  public Boolean getIsMasterUser() {
    return isMasterUser;
  }


  public void setIsMasterUser(Boolean isMasterUser) {
    this.isMasterUser = isMasterUser;
  }


  public UserDetail mobile(String mobile) {
    
    this.mobile = mobile;
    return this;
  }

   /**
   * 手机号
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机号")

  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public UserDetail name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 用户名称
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "用户名称")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UserDetail price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * 单价
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "单价")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDetail userDetail = (UserDetail) o;
    return Objects.equals(this.address, userDetail.address) &&
        Objects.equals(this.amount, userDetail.amount) &&
        Objects.equals(this.gmtSignUp, userDetail.gmtSignUp) &&
        Objects.equals(this.isMasterUser, userDetail.isMasterUser) &&
        Objects.equals(this.mobile, userDetail.mobile) &&
        Objects.equals(this.name, userDetail.name) &&
        Objects.equals(this.price, userDetail.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, amount, gmtSignUp, isMasterUser, mobile, name, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDetail {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    gmtSignUp: ").append(toIndentedString(gmtSignUp)).append("\n");
    sb.append("    isMasterUser: ").append(toIndentedString(isMasterUser)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("amount");
    openapiFields.add("gmt_sign_up");
    openapiFields.add("is_master_user");
    openapiFields.add("mobile");
    openapiFields.add("name");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UserDetail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDetail is not found in the empty JSON string", UserDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("gmt_sign_up") != null && !jsonObj.get("gmt_sign_up").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmt_sign_up` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmt_sign_up").toString()));
      }
      if (jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDetail>() {
           @Override
           public void write(JsonWriter out, UserDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserDetail
  * @throws IOException if the JSON string is invalid with respect to UserDetail
  */
  public static UserDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDetail.class);
  }

 /**
  * Convert an instance of UserDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

